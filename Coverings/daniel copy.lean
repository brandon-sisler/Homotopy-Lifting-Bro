import Mathlib.Topology.Basic
import Mathlib.Topology.ContinuousOn
import Mathlib.Topology.Covering
import Mathlib.Topology.LocalHomeomorph
import Mathlib.Topology.UnitInterval
import Coverings.tony
import Coverings.lean3
import Coverings.Uniqueness
open Topology Filter unitInterval Bundle

/-
Notation:
`E` : the covering space of `X` - otherwise denoted tilde X
`F` : the lift of the map `f`
`F‚ÇÄ` : the start of `F`, i.e. `F‚ÇÄ = F(y, 0)`

`U : Œπ ‚Üí Set Œ±` : collection of (open) sets of Œ±
`s ‚äÜ ‚ãÉ i, U i` : a (possibly infinite) open cover 
`‚àÉ t : Finset Œπ, s ‚äÜ ‚ãÉ i ‚àà t, U i` : existence of finite subcover

`Continuous f` : `f` is globally continuous
`ContinuousAt f a` : `f` is continuous at the point a

`IsCompact (s : Set Œ±)` : the set s is compact in topological space `Œ±`

`Trivialization F proj` : local trivialization of `proj : E ‚Üí B` with fiber `F`
`IsEvenlyCovered x Œπ` : `DiscreteTopology Œπ ‚àß ‚àÉ t : Trivialization Œπ p, x ‚àà t.baseSet`
                      : fiber over x has discrete topology & has a local trivialization
`IsCoveringMap (f : E ‚Üí X)` : `‚àÄ x, IsEvenlyCovered (f x) (f ‚Åª¬π' {x})`

`‚àÄ·∂† y ‚àà ùìù x, P y` : exists a nbhd `U` of `x` such that `y ‚àà U ‚Üí P y`

Theorems:
`toTrivialization` : gets local trivialization above a point from a covering map
`IsCompact.elim_finite_subcover` : reduces open cover to finite cover

`isCompact_singleton` : set of a single point is compact
`isCompact_prod` : product of compact sets is compact
-/

variable {X Y Xt : Type _}
variable [TopologicalSpace X] [TopologicalSpace Y] [TopologicalSpace Xt]
variable {p : Xt ‚Üí X} 
variable (x : X) (y : Y) (t : I)

open Function Set

namespace IsCoveringMap

variable (Y)
structure LiftingSituation (hp : IsCoveringMap p) where
  F : I √ó Y ‚Üí X
  hF : Continuous F
  F0t : Y ‚Üí Xt
  hF0t : Continuous F0t
  -- `F‚ÇÄ` is a lift of `f (‚¨ù, 0)`
  f_eq_p_F0t : ‚àÄ y, F (0, y) = p (F0t y)

variable {Y}
variable (hp : IsCoveringMap p) (Œ¶ : hp.LiftingSituation Y)

lemma aux (y : Y) (hy : y ‚àà U) : (0, y) ‚àà (univ √óÀ¢ U) := by
  apply mk_mem_prod _ hy
  apply mem_univ

-- rearrange the data of the theorem `test`
theorem test2 (y : Y) : 
    ‚àÉ U ‚àà ùìù y, ‚àÉ Ft : ContinuousMap ((univ : Set I) √óÀ¢ U) Xt, 
    (‚àÄ (y' : Y) (hy' : y' ‚àà U), Ft ‚ü®(0, y'), aux y' hy'‚ü© = Œ¶.F0t y') 
    ‚àß ‚àÄ z : (univ : Set I) √óÀ¢ U, Œ¶.F z = p (Ft z) := by
  have data : ‚àÄ y : Y, ‚àÉ U ‚àà ùìù y, ‚àÉ Ft : I ‚Üí Y ‚Üí Xt,
  ContinuousOn (uncurry Ft) (univ √óÀ¢ U) 
  ‚àß EqOn (Ft 0) Œ¶.F0t U 
  ‚àß EqOn Œ¶.F (p ‚àò uncurry Ft) (univ √óÀ¢ U) := by
    apply test Y X Xt p hp (curry Œ¶.F) Œ¶.hF Œ¶.F0t Œ¶.hF0t _
    ext y
    exact Œ¶.f_eq_p_F0t y
  specialize data y
  rcases data with ‚ü®U, hU, ‚ü®Ft, hFt, eq1, eq2‚ü©‚ü©
  use U
  constructor
  . exact hU
  . let Ft' : ContinuousMap ((univ : Set I) √óÀ¢ U) Xt := by
      let Ft' : (univ : Set I) √óÀ¢ U ‚Üí Xt := restrict ((univ : Set I) √óÀ¢ U) (uncurry Ft)
      have hFt' : Continuous Ft' := by
        rw [continuousOn_iff_continuous_restrict] at hFt
        exact hFt
      exact ‚ü®Ft', hFt'‚ü©
    use Ft'
    constructor
    . rintro y' hy'
      rw [‚Üê restrict_eq_restrict_iff] at eq1
      rw [restrict_eq_iff] at eq1
      specialize eq1 y' hy'
      dsimp
      rw [eq1]
      rfl
    . intro z
      rw [‚Üê restrict_eq_restrict_iff] at eq2
      rw [restrict_eq_iff] at eq2
      specialize eq2 z (Subtype.mem z)
      rw [eq2]
      rfl

def tube (y : Y) : Set Y := (hp.test2 Œ¶ y).choose

lemma tubes_nhds (y : Y) : hp.tube Œ¶ y ‚àà ùìù y := (hp.test2 Œ¶ y).choose_spec.1

noncomputable def nhd_lift (y : Y) : ContinuousMap ((univ : Set I) √óÀ¢ hp.tube Œ¶ y) Xt :=
  (hp.test2 Œ¶ y).choose_spec.2.choose

lemma extends_F‚ÇÄ (y : Y) (y' : Y) (hy' : y' ‚àà hp.tube Œ¶ y) :
    hp.nhd_lift Œ¶ y ‚ü®(0, y'), aux y' hy'‚ü© = Œ¶.F0t y' :=
  (hp.test2 Œ¶ y).choose_spec.2.choose_spec.1 y' hy'

lemma is_lift (y : Y) (z : (univ : Set I) √óÀ¢ hp.tube Œ¶ y) :
    Œ¶.F z = p (hp.nhd_lift Œ¶ y z) :=
  (hp.test2 Œ¶ y).choose_spec.2.choose_spec.2 z

noncomputable def liftToCoveringSpace : ContinuousMap (I √ó Y) Xt :=
ContinuousMap.liftCover
  (fun y ‚Ü¶ ((univ : Set I) √óÀ¢ hp.tube Œ¶ y))
  (hp.nhd_lift Œ¶)
  ( by
    rintro y‚ÇÅ y‚ÇÇ x hxi hxj
    let U := (univ : Set I) √óÀ¢ hp.tube Œ¶ y‚ÇÅ ‚à© (univ : Set I) √óÀ¢ hp.tube Œ¶ y‚ÇÇ
    sorry
    -- apply uniqueness_of_homotopy_lifting _ _ hp (hp.nhd_lift Œ¶ y‚ÇÅ) (hp.nhd_lift Œ¶ y‚ÇÇ) 
  )
  sorry

theorem homotopy_lift‚ÇÅ : p ‚àò (hp.liftToCoveringSpace Œ¶) = Œ¶.F := by
  sorry

theorem homotopy_lift‚ÇÇ (y : Y) : hp.liftToCoveringSpace Œ¶ (0, y) = Œ¶.F0t y := by
  sorry

-- repackage:
-- make a `LiftingSituation` inside this proof and then pull in the constructions above
theorem homotopy_lift (hf : Continuous f) (hp : IsCoveringMap p) (hF‚ÇÄ : Continuous F‚ÇÄ)
  (h : ‚àÄ (y : Y), f (0, y) = p (F‚ÇÄ y))
    : ‚àÉ F : I √ó Y ‚Üí Xt, Continuous F ‚àß p ‚àò F = f ‚àß (fun y ‚Ü¶ F (0, y)) = F‚ÇÄ := by
  let Œ¶ : LiftingSituation Y hp := {
    F := f
    hF := hf
    F0t := F‚ÇÄ 
    hF0t := hF‚ÇÄ
    f_eq_p_F0t := h      
  }
  use liftToCoveringSpace hp Œ¶
  exact ‚ü®(liftToCoveringSpace hp Œ¶).2, homotopy_lift‚ÇÅ hp Œ¶, by
    ext y
    exact homotopy_lift‚ÇÇ hp Œ¶ y‚ü© 

#exit -- probably don't need the rest

lemma nbhd_in_trivialization (y : Y) (t : I) :
  ‚àÉ triv : Trivialization (p ‚Åª¬π' {f (y, t)}) p, ‚àÉ Nyt ‚àà ùìù (y, t), f '' Nyt ‚äÜ triv.baseSet := by
    -- find the trivialization
    specialize hp <| f (y, t)
    let triv : Trivialization (p ‚Åª¬π' {f (y, t)}) p := by
      apply IsEvenlyCovered.toTrivialization hp
    use triv 
    -- let U : Set (X) := triv.baseSet
    use f ‚Åª¬π' triv.baseSet
    constructor
    . rw [mem_nhds_iff]
      use f ‚Åª¬π' triv.baseSet
      constructor
      . rfl
      . constructor
        . exact IsOpen.preimage hf triv.open_baseSet
        . rw [Set.mem_preimage]
          exact IsEvenlyCovered.mem_toTrivialization_baseSet hp
    . exact Set.image_preimage_subset f triv.baseSet

lemma lift_from_point (y : Y) (s : Set I) (hso : IsOpen s) (hsc : IsConnected s)
  (triv : Trivialization (p ‚Åª¬π' {f (y, t)}) p) (htriv : f '' ({y} √óÀ¢ s) ‚äÜ triv.baseSet)
  (pt : s) (Fpt : E) : ‚àÉ F : s ‚Üí E, Continuous F ‚àß (F pt = Fpt) := by sorry

