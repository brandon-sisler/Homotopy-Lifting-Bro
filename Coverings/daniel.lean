--import Mathlib.Topology.Basic
--import Mathlib.Topology.ContinuousOn
--import Mathlib.Topology.Covering
--import Mathlib.Topology.LocalHomeomorph
--import Mathlib.Topology.UnitInterval
import Coverings.tony
--import Coverings.lean3
import Coverings.Uniqueness
open Topology Filter unitInterval Bundle

/-
Notation:
`E` : the covering space of `X` - otherwise denoted tilde X
`F` : the lift of the map `f`
`F‚ÇÄ` : the start of `F`, i.e. `F‚ÇÄ = F(y, 0)`

`U : Œπ ‚Üí Set Œ±` : collection of (open) sets of Œ±
`s ‚äÜ ‚ãÉ i, U i` : a (possibly infinite) open cover 
`‚àÉ t : Finset Œπ, s ‚äÜ ‚ãÉ i ‚àà t, U i` : existence of finite subcover

`Continuous f` : `f` is globally continuous
`ContinuousAt f a` : `f` is continuous at the point a

`IsCompact (s : Set Œ±)` : the set s is compact in topological space `Œ±`

`Trivialization F proj` : local trivialization of `proj : E ‚Üí B` with fiber `F`
`IsEvenlyCovered x Œπ` : `DiscreteTopology Œπ ‚àß ‚àÉ t : Trivialization Œπ p, x ‚àà t.baseSet`
                      : fiber over x has discrete topology & has a local trivialization
`IsCoveringMap (f : E ‚Üí X)` : `‚àÄ x, IsEvenlyCovered (f x) (f ‚Åª¬π' {x})`

`‚àÄ·∂† y ‚àà ùìù x, P y` : exists a nbhd `U` of `x` such that `y ‚àà U ‚Üí P y`

Theorems:
`toTrivialization` : gets local trivialization above a point from a covering map
`IsCompact.elim_finite_subcover` : reduces open cover to finite cover

`isCompact_singleton` : set of a single point is compact
`isCompact_prod` : product of compact sets is compact
-/

variable {X Y E : Type _}
variable [TopologicalSpace X] [TopologicalSpace Y] [TopologicalSpace E]
variable {p : E ‚Üí X} 
variable (x : X) (y : Y) (t : I)

open Function Set

namespace IsCoveringMap

variable (Y)
structure LiftingSituation (hp : IsCoveringMap p) where
  f : Y √ó I ‚Üí X
  hf : Continuous f
  F‚ÇÄ : Y ‚Üí E
  hF‚ÇÄ : Continuous F‚ÇÄ
  -- `F‚ÇÄ` is a lift of `f (‚¨ù, 0)`
  f_eq_p_F‚ÇÄ : ‚àÄ y, f (y, 0) = p (F‚ÇÄ y)

variable {Y}
variable (hp : IsCoveringMap p) (Œ¶ : hp.LiftingSituation Y)

lemma aux (y : Y) (hy : y ‚àà U) : (y, 0) ‚àà (U √óÀ¢ univ) := by
  apply mk_mem_prod hy
  apply mem_univ

-- rearrange the data of the theorem `test`
theorem test2 (y : Y) : 
    ‚àÉ U ‚àà ùìù y, ‚àÉ Ft : ContinuousMap (U √óÀ¢ (univ : Set I)) E, 
    (‚àÄ (y' : Y) (hy' : y' ‚àà U), Ft ‚ü®(y', 0), aux y' hy'‚ü© = Œ¶.F‚ÇÄ y') 
    ‚àß ‚àÄ z : U √óÀ¢ (univ : Set I), Œ¶.f z = p (Ft z) :=
  sorry 

def tube (y : Y) : Set Y := (hp.test2 Œ¶ y).choose

lemma tubes_nhds (y : Y) : hp.tube Œ¶ y ‚àà ùìù y := (hp.test2 Œ¶ y).choose_spec.1

noncomputable def nhd_lift (y : Y) : ContinuousMap (hp.tube Œ¶ y √óÀ¢ (univ : Set I)) E :=
  (hp.test2 Œ¶ y).choose_spec.2.choose

lemma extends_F‚ÇÄ (y : Y) (y' : Y) (hy' : y' ‚àà hp.tube Œ¶ y) :
    hp.nhd_lift Œ¶ y ‚ü®(y', 0), aux y' hy'‚ü© = Œ¶.F‚ÇÄ y' :=
  (hp.test2 Œ¶ y).choose_spec.2.choose_spec.1 y' hy'

lemma is_lift (y : Y) (z : hp.tube Œ¶ y √óÀ¢ (univ : Set I)) :
    Œ¶.f z = p (hp.nhd_lift Œ¶ y z) :=
  (hp.test2 Œ¶ y).choose_spec.2.choose_spec.2 z

noncomputable def liftToCoveringSpace : ContinuousMap (Y √ó I) E :=
ContinuousMap.liftCover
  (fun y ‚Ü¶ (hp.tube Œ¶ y √óÀ¢ (univ : Set I)))
  (hp.nhd_lift Œ¶)
  sorry
  sorry

theorem homotopy_lift‚ÇÅ : p ‚àò (hp.liftToCoveringSpace Œ¶) = Œ¶.f := sorry

theorem homotopy_lift‚ÇÇ (y : Y) : hp.liftToCoveringSpace Œ¶ (y, 0) = Œ¶.F‚ÇÄ y := sorry

-- repackage:
-- make a `LiftingSituation` inside this proof and then pull in the constructions above
theorem homotopy_lift (hf : Continuous f) (hp : IsCoveringMap p) (hF‚ÇÄ : Continuous F‚ÇÄ) :
    ‚àÉ F : Y √ó I ‚Üí E, Continuous F ‚àß p ‚àò F = f ‚àß (fun y ‚Ü¶ F (y, 0)) = F‚ÇÄ :=
  sorry


#exit -- probably don't need the rest

lemma nbhd_in_trivialization (y : Y) (t : I) :
  ‚àÉ triv : Trivialization (p ‚Åª¬π' {f (y, t)}) p, ‚àÉ Nyt ‚àà ùìù (y, t), f '' Nyt ‚äÜ triv.baseSet := by
    -- find the trivialization
    specialize hp <| f (y, t)
    let triv : Trivialization (p ‚Åª¬π' {f (y, t)}) p := by
      apply IsEvenlyCovered.toTrivialization hp
    use triv 
    -- let U : Set (X) := triv.baseSet
    use f ‚Åª¬π' triv.baseSet
    constructor
    . rw [mem_nhds_iff]
      use f ‚Åª¬π' triv.baseSet
      constructor
      . rfl
      . constructor
        . exact IsOpen.preimage hf triv.open_baseSet
        . rw [Set.mem_preimage]
          exact IsEvenlyCovered.mem_toTrivialization_baseSet hp
    . exact Set.image_preimage_subset f triv.baseSet

lemma lift_from_point (y : Y) (s : Set I) (hso : IsOpen s) (hsc : IsConnected s)
  (triv : Trivialization (p ‚Åª¬π' {f (y, t)}) p) (htriv : f '' ({y} √óÀ¢ s) ‚äÜ triv.baseSet)
  (pt : s) (Fpt : E) : ‚àÉ F : s ‚Üí E, Continuous F ‚àß (F pt = Fpt) := by sorry

