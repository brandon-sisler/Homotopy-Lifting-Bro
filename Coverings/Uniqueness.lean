import Mathlib.Topology.Covering
import Mathlib.Topology.Connected 
import Mathlib.Topology.Basic
import Mathlib.Topology.IsLocallyHomeomorph
import Mathlib.Topology.FiberBundle.Basic
import Mathlib.Topology.Instances.Real
import Mathlib.SetTheory.Cardinal.Basic 
import Mathlib.Topology.LocallyConstant.Basic
open Cardinal Topology

set_option autoImplicit false
set_option maxHeartbeats 0

namespace IsCoveringMap

variable {E X : Type _} [TopologicalSpace E] [TopologicalSpace X] (f : E ‚Üí X) (s t: Set X)



/- 

  Following lemma states that if a clopen set S ‚äÜ Y intersects with all the connected 
  components of Y, then S = Y

  main idea in the proof: If a clopen set intersects a connected component then 
  the clopen set must contain that connected component 
  
-/

#check IsClopen.connectedComponent_subset


lemma clopen_set_intersect_connected_components_whole_set (Y: Type _) [TopologicalSpace Y]
  (S : Set Y) (hS : IsClopen S) (w : ‚àÄ x : Y, ‚àÉ y ‚àà connectedComponent x, y ‚àà S) :
  S = Set.univ := by 
  apply Set.eq_univ_of_forall 
  intro x 
  specialize w x 
  cases' w with y h1
  have con_same : connectedComponent x = connectedComponent y := connectedComponent_eq (h1.1)
  have y_con: connectedComponent y ‚äÜ S := by 
    apply IsClopen.connectedComponent_subset   
    exact hS
    exact h1.2
  have con_sub : connectedComponent x ‚äÜ S := by 
    rw[con_same] 
    exact y_con
  have x_in_con : x ‚àà connectedComponent x := mem_connectedComponent 
  exact con_sub x_in_con 


/- 
    Following key theorem states that a set A ‚äÜ Y is open in Y ‚Üî for every y ‚àà Y 
    there is a nbhd U_y of y such that U_y ‚à© A is open in U_y 

    Follows by parsing the definitions

    Note that this is an if and only if statement
-/


#check mem_nhds_iff
#check Set.inter_subset_left
#check IsOpen.preimage
#check continuous_inclusion
#check isOpen_iff_forall_mem_open



lemma is_open_of_is_open_coe (Y:Type _) [TopologicalSpace Y] (A: Set Y)
    (hA : ‚àÄ x : Y, ‚àÉ (U : Set Y) (_ : U ‚àà ùìù x), 
    IsOpen ((Subtype.val : U ‚Üí Y) ‚Åª¬π' A)) : IsOpen A := by 

    rw[isOpen_iff_forall_mem_open] 
    intro x 
    specialize hA x 
    intro xA 
    rcases hA with ‚ü® U, UNx, W, Wopen,hW‚ü©
    have hW1: W ‚à© U = A ‚à© U := by
      rw[‚Üê Subtype.preimage_val_eq_preimage_val_iff]
      exact hW
    have UNx':‚àÉ V, V ‚äÜ U ‚àß IsOpen V ‚àß x ‚àà V := by
      rw [‚Üê mem_nhds_iff]
      exact UNx
    rcases UNx' with ‚ü®V,VU,Vopen,xV‚ü© 
    use W ‚à© V
    constructor
    rintro v ‚ü® vW,vV‚ü©
    apply Set.inter_subset_left A U  
    rw [‚Üê hW1]
    constructor
    exact vW
    apply VU
    exact vV
    constructor
    exact IsOpen.inter Wopen Vopen
    constructor
    apply Set.inter_subset_left W U
    rw [hW1]
    constructor
    exact xA
    apply VU
    exact xV
    exact xV


/- 
    Corollary of the above theorem is that a set A ‚äÜ Y is closed in Y ‚Üî for every y ‚àà Y 
    there is a nbhd U_y of y such that U_y ‚à© A is closed in U_y

    Follows by using above theorem for complement of A  
-/


lemma is_closed_of_is_closed_coe (Y:Type _) [TopologicalSpace Y] (A: Set Y)
(hA : ‚àÄ x : Y, ‚àÉ (U : Set Y) (_ : U ‚àà ùìù x), IsClosed ((Subtype.val : U ‚Üí Y) ‚Åª¬π' A)) : IsClosed A := by 
  rw [‚Üê isOpen_compl_iff]
  apply is_open_of_is_open_coe 
  intro x 
  specialize hA x 
  cases' hA with hleft hright 
  cases' hright with h1 h2 
  use hleft 
  use h1 
  dsimp only [Set.preimage_compl] 
  rw [isOpen_compl_iff]
  exact h2   


/- 
    A direct consequence is that a set A ‚äÜ Y is clopen in Y ‚Üî for every y ‚àà Y 
    there is a nbhd U_y of y such that U_y ‚à© A is clopen in U_y

    Follows as a consequence of the previous two theorems  
-/


lemma is_clopen_of_is_clopen_coe (Y:Type _) [TopologicalSpace Y] (A: Set Y)
(hA : ‚àÄ x : Y, ‚àÉ (U : Set Y) (_ : U ‚àà ùìù x), IsClopen ((Subtype.val : U ‚Üí Y) ‚Åª¬π' A)) : IsClopen A := by
  have left : IsOpen A := by
    apply is_open_of_is_open_coe Y A 
    intro x 
    specialize hA x 
    cases' hA with hleft hright
    use hleft 
    cases' hright with hleft hright
    use hleft 
    exact hright.1 

  have right : IsClosed A := by
    apply is_closed_of_is_closed_coe Y A 
    intro x 
    specialize hA x 
    cases' hA with hleft hright
    use hleft 
    cases' hright with hleft hright
    use hleft 
    exact hright.2 

  exact ‚ü®left, right ‚ü© 


/- 
 
    Following lemma states that if f, g : X ‚Üí Y are continuous and Y is a discrete topological
    space, then {x ‚àà X ‚à£ f(x) = g(x)} is clopen in X 
    
    Main idea is to construct the function (f, g) : X ‚Üí Y √ó Y.
    Then {x ‚àà X ‚à£ f(x) = g(x)} is the inverse image of the diagonal in Y √ó Y.

-/


theorem clopen_equalizer_of_discrete (Y:Type _) [TopologicalSpace Y]
  [DiscreteTopology Y] {h g : X ‚Üí Y} (hf : Continuous h) (hg : Continuous g) :
  IsClopen {x : X | h x = g x} := by 
  have diag_cl : IsClopen (Set.diagonal Y) := by 
    apply isClopen_discrete
  have con_map : Continuous (fun x => (g x, h x)) := by
    apply continuous_prod_mk.mpr 
    constructor 
    exact hg 
    exact hf 
  have : IsClopen (((fun x => (g x, h x))) ‚Åª¬π' (Set.diagonal Y)) := by
    apply IsClopen.preimage
    exact diag_cl
    exact con_map
  have re : (fun x => (g x, h x)) ‚Åª¬π' Set.diagonal Y = {x |h x = g x} := by 
    ext n  
    simp only [Set.mem_preimage, Set.mem_diagonal_iff, Set.mem_setOf_eq]
    tauto 
  rw[‚Üêre]
  exact this


--- Statement of the Theorem ---




/-
      

          Y -------------->  X               
         ^  \                ^ 
         |   \               |
         |       \ H‚ÇÇ        |
         |        \          |  f ;   if the triangles commute then H‚ÇÅ=H‚ÇÇ.  
         |      H‚ÇÅ     \     |
         |              \    |
         |                >  |
        Œ†‚ÇÄY  ------------->  E             

-/

theorem uniqueness_of_homotopy_lifting (Y : Type _) [TopologicalSpace Y] (hf : IsCoveringMap f)
  (H‚ÇÅ H‚ÇÇ : ContinuousMap Y E) (h : f ‚àò H‚ÇÅ = f ‚àò H‚ÇÇ)
  (hC : ‚àÄ x : Y, ‚àÉ y ‚àà connectedComponent x, H‚ÇÅ y = H‚ÇÇ y) :
  H‚ÇÅ = H‚ÇÇ := by 


/- Define S := {y ‚àà Y ‚à£ H‚ÇÅ(y) = H‚ÇÇ(y)} -/

  let S:= {y:Y | H‚ÇÅ y = H‚ÇÇ y}

  have fCont: Continuous f:= IsCoveringMap.continuous hf 
  have H‚ÇÅCont: Continuous H‚ÇÅ:= ContinuousMap.continuous H‚ÇÅ 
  have H‚ÇÇCont: Continuous H‚ÇÇ:= ContinuousMap.continuous H‚ÇÇ


  have ClopenS : IsClopen S := by

    /- 
    
    By Lemma is_clopen_of_is_clopen_coe it suffices 
    to prove that for every y there is open U_y that U_y ‚à© S is clopen in U_y 

    -/

    apply is_clopen_of_is_clopen_coe
    intro y
    
    let x:=(f (H‚ÇÅ y))
    specialize hf (x)
    rcases hf with ‚ü®DT, TrivN, xTrivN ‚ü©   
    let U_y := ((f‚àò H‚ÇÅ)‚Åª¬π' TrivN.baseSet)
    
    have hFu : ‚àÄ u' ‚àà U_y , (f ‚àò H‚ÇÇ) u' ‚àà TrivN.baseSet := by 
          intro u'
          intro Q
          show u' ‚àà (f ‚àò H‚ÇÇ)‚Åª¬π' (TrivN.baseSet)  
          rw [‚Üê h]
          exact Q

    have UyNy: U_y‚àà ùìù y:= by
      rw [IsOpen.mem_nhds_iff]
      ¬∑ exact xTrivN
      apply  Continuous.isOpen_preimage 
      ¬∑ exact Continuous.comp fCont H‚ÇÅCont
      ¬∑ exact TrivN.open_baseSet

    have FuU_yEq :‚àÄ u:U_y, f (H‚ÇÅ u) = f (H‚ÇÇ u) := by
        intro u
        calc
        f (H‚ÇÅ u)=(f‚àò  H‚ÇÅ) u:=  rfl
        _=(f‚àò H‚ÇÇ) u:= by rw [h]

    use  U_y  
    
    
    use UyNy
    dsimp only [Set.preimage_setOf_eq]
    
    have key : ‚àÄ u : U_y, H‚ÇÅ u = H‚ÇÇ u ‚Üî (TrivN (H‚ÇÅ u)).2 = (TrivN (H‚ÇÇ u)).2 := by
      intro u
      
      have FuBaseSet : (f ‚àò H‚ÇÇ) u ‚àà TrivN.baseSet :=  (hFu u) (Subtype.mem u)
        
      
      constructor
      intro H‚ÇÅueqH‚ÇÇu
      ¬∑ exact congrArg Prod.snd (congrArg (‚ÜëTrivN) H‚ÇÅueqH‚ÇÇu)
      
      
      
      have H‚ÇÅuSource: H‚ÇÅ u ‚àà TrivN.source:= by
        rw [TrivN.mem_source]
        rw [FuU_yEq u]
        exact FuBaseSet

      have H‚ÇÇuSource: H‚ÇÇ u ‚àà TrivN.source:= by
        rw [TrivN.mem_source]
        exact FuBaseSet

      intro H‚ÇÅProjeqH‚ÇÇProj
      apply TrivN.injOn 
      
      exact H‚ÇÅuSource
      exact H‚ÇÇuSource
      
      
      ext

      rw [TrivN.proj_toFun (H‚ÇÅ u) H‚ÇÅuSource]
      rw [TrivN.proj_toFun (H‚ÇÇ u) H‚ÇÇuSource]
      
      exact FuU_yEq u
      exact congrArg Subtype.val H‚ÇÅProjeqH‚ÇÇProj
    
    simp_rw [key]
    
    apply clopen_equalizer_of_discrete
    apply Continuous.snd 
    
    have H‚ÇÅUSource: ‚àÄ u : U_y, H‚ÇÅ ((Subtype.val : U_y ‚Üí Y) u) ‚àà TrivN.source:= by 
      simp only [Subtype.forall, Set.mem_preimage, Function.comp_apply]
      intro var
      rw[ TrivN.mem_source]
      simp only [imp_self]

    exact TrivN.continuous_toFun.comp_continuous (H‚ÇÅCont.comp continuous_subtype_val) H‚ÇÅUSource
    
    apply Continuous.snd
    
    have H‚ÇÇUSource: ‚àÄ u : U_y, H‚ÇÇ ((Subtype.val : U_y ‚Üí Y) u) ‚àà TrivN.source:= by 
      simp only [Subtype.forall, Set.mem_preimage, Function.comp_apply]
      intro var
      rw[ TrivN.mem_source]
      have FuEq : f (H‚ÇÅ var) = f (H‚ÇÇ var) := by
        calc
        f (H‚ÇÅ var)=(f‚àò  H‚ÇÅ) var:=  rfl
        _=(f‚àò H‚ÇÇ) var:= by rw [h]
      rw [FuEq]
      simp only [imp_self]
    exact TrivN.continuous_toFun.comp_continuous (H‚ÇÇCont.comp continuous_subtype_val) H‚ÇÇUSource




  have SEqUniv : S = Set.univ := by 
    apply clopen_set_intersect_connected_components_whole_set 
    exact ClopenS 
    exact hC 
  
  ext z
  
  have zS : z ‚àà S := by  
    rw [SEqUniv]
    exact trivial 
  
  exact zS 
   



/- S is clopen proof Part 2(a) : U_y ‚à© S = {z ‚àà U_y ‚à£ H‚ÇÅ(z) = H‚ÇÇ(z)} -/



/- S is clopen proof Part 2(b) : ‚àÉ discrete topological space D such that 
f‚Åª¬π(V_y) ‚âÖ V_y √ó D := by defn of covering -/



/- S is clopen proof Part 2(c) : {z ‚àà U_y ‚à£ (proj_D ‚àò H‚ÇÅ)(z) = (proj_D ‚àò H‚ÇÇ)(z)} is clopen in U_y := 
by Lemma 2 -/



/- S is clopen proof Part 2(d) : {z ‚àà U_y ‚à£ (proj_D ‚àò H‚ÇÅ)(z) = (proj_D ‚àò H‚ÇÇ)(z)} 
= {z ‚àà U_y ‚à£ H‚ÇÅ(z) = H‚ÇÇ(z)} and {z ‚àà U_y ‚à£ H‚ÇÅ(z) = H‚ÇÇ(z)} clopen by 2(c) and 
 -/



/- S is clopen proof Part 2(e) : S is clopen by Part 1 and Part 2(a) -/



/- Proof that S = Y using Lemma 3 -/



/- S is clopen proof Part 2(a) : U_y ‚à© S = {z ‚àà U_y ‚à£ H‚ÇÅ(z) = H‚ÇÇ(z)} -/



/- S is clopen proof Part 2(b) : ‚àÉ discrete topological space D such that 
f‚Åª¬π(V_y) ‚âÖ V_y √ó D := by defn of covering -/



/- S is clopen proof Part 2(c) : {z ‚àà U_y ‚à£ (proj_D ‚àò H‚ÇÅ)(z) = (proj_D ‚àò H‚ÇÇ)(z)} is clopen in U_y := 
by Lemma 2 -/



/- S is clopen proof Part 2(d) : {z ‚àà U_y ‚à£ (proj_D ‚àò H‚ÇÅ)(z) = (proj_D ‚àò H‚ÇÇ)(z)} 
= {z ‚àà U_y ‚à£ H‚ÇÅ(z) = H‚ÇÇ(z)} and {z ‚àà U_y ‚à£ H‚ÇÅ(z) = H‚ÇÇ(z)} clopen by 2(c) and 
 -/



/- S is clopen proof Part 2(e) : S is clopen by Part 1 and Part 2(a) -/



/- Proof that S = Y using Lemma 3 -/



/- Define S := {y ‚àà Y ‚à£ H‚ÇÅ(y) = H‚ÇÇ(y)} -/
  

/- S is clopen proof Part 1 : by Lemma 1 it suffices to prove that U_y ‚à© S is
clopen in U_y (where for y ‚àà Y, F(y) ‚àà X has evenly covered nbhd V_y by defn
of covering and U_y := F^{-1}(V_y)) -/
