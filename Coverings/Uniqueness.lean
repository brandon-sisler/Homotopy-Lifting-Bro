--import Mathlib.Topology.Instances.Real
import Mathlib.Topology.Homotopy.Basic
import Mathlib.Topology.IsLocallyHomeomorph
--import Mathlib.Topology.FiberBundle.basic
import Mathlib.Topology.LocallyConstant.Basic
import Mathlib.SetTheory.Cardinal.Basic
import Mathlib.Topology.Covering
--import Mathlib.Topology.basic

set_option maxHeartbeats 0

open Set Filter Topology




















variable (Y:Type _)  [TopologicalSpace Y](S : Set Y)

 


/- Lemma 1 stating that a set S ‚äÜ Y is clopen in Y ‚Üî ‚àÄ y ‚àà Y ‚àÉ nbhd U_y of y 
such that U_y ‚à© S is clopen in U_y -/

lemma ClopenIffNbhdClopen (Y: Type _) [TopologicalSpace Y](S : Set Y) :
 (‚àÄ y :  Y, ‚àÉ U: Set Y,  U ‚àà ùìù y) ‚Üî IsClopen S := by sorry



/- Lemma 1 proof -/



/- Lemma 2 stating that if f, g : X ‚Üí Y are continuous and Y is a discrete topological
space, then {x ‚àà X ‚à£ f(x) = g(x)} is clopen in X -/

lemma EquilizerOfDiscreteIsClopen (X Y: Type _) [TopologicalSpace X] [TopologicalSpace Y]
  [DiscreteTopology Y] (f g:ContinuousMap X Y)  : 
  IsClopen {x : X | f x = g x} := by sorry
  

/- Lemma 2 proof -/



/- Lemma 3 stating that if a clopen set S ‚äÜ Y intersects with all the connected components of Y, then S = Y -/

#check connectedComponent
#check IsClopen.connectedComponent_subset

lemma ClopenInterConnectedCompUniv (Y: Type _)[TopologicalSpace Y](S: Set Y)(hS: IsClopen S)
(h: ‚àÄx :Y, ‚àÉ y‚àà connectedComponent x, y‚àà S): S=Set.univ := by


/- Lemma 3 proof -/
  ext z                   
  constructor
  ¬∑ exact fun _ => trivial
  intro 
  specialize h z
  rcases h with ‚ü®y,hy, yS‚ü© 
  have h1:= IsClopen.connectedComponent_subset hS yS
  have h2 : z‚àà connectedComponent y := by
    rw [‚Üê connectedComponent_eq_iff_mem]
    exact connectedComponent_eq hy
  apply h1
  exact h2



--- Statement of the Theorem ---


theorem UniquenessOfHomotopyLifting (Y X E: Type _) 
[TopologicalSpace Y][TopologicalSpace X][TopologicalSpace E]
(f:ContinuousMap E X)(hf: IsCoveringMap f)
(H‚ÇÅ H‚ÇÇ : ContinuousMap Y E)(h: f ‚àò H‚ÇÅ = f ‚àò H‚ÇÇ)
(hC : ‚àÄ x : Y, ‚àÉ y ‚àà connectedComponent x, H‚ÇÅ y = H‚ÇÇ y) : H‚ÇÅ = H‚ÇÇ  := by 

  

/- Define S := {y ‚àà Y ‚à£ H‚ÇÅ(y) = H‚ÇÇ(y)} -/
  let S:= {y:Y | H‚ÇÅ y = H‚ÇÇ y}
  

/- S is clopen proof Part 1 : by Lemma 1 it suffices to prove that U_y ‚à© S is
clopen in U_y (where for y ‚àà Y, F(y) ‚àà X has evenly covered nbhd V_y by defn
of covering and U_y := F^{-1}(V_y)) -/

  have ClopenS : IsClopen S := by
   rw [‚Üê ClopenIffNbhdClopen]
   sorry
   



/- S is clopen proof Part 2(a) : U_y ‚à© S = {z ‚àà U_y ‚à£ H‚ÇÅ(z) = H‚ÇÇ(z)} -/



/- S is clopen proof Part 2(b) : ‚àÉ discrete topological space D such that 
f‚Åª¬π(V_y) ‚âÖ V_y √ó D := by defn of covering -/



/- S is clopen proof Part 2(c) : {z ‚àà U_y ‚à£ (proj_D ‚àò H‚ÇÅ)(z) = (proj_D ‚àò H‚ÇÇ)(z)} is clopen in U_y := 
by Lemma 2 -/



/- S is clopen proof Part 2(d) : {z ‚àà U_y ‚à£ (proj_D ‚àò H‚ÇÅ)(z) = (proj_D ‚àò H‚ÇÇ)(z)} 
= {z ‚àà U_y ‚à£ H‚ÇÅ(z) = H‚ÇÇ(z)} and {z ‚àà U_y ‚à£ H‚ÇÅ(z) = H‚ÇÇ(z)} clopen by 2(c) and 
 -/



/- S is clopen proof Part 2(e) : S is clopen by Part 1 and Part 2(a) -/



/- Proof that S = Y using Lemma 3 -/





  sorry














