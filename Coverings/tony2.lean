-- import Mathlib
import Mathlib.Topology.Constructions
import Mathlib.Topology.Covering
import Mathlib.Topology.Algebra.Order.Compact
import Mathlib.Topology.Instances.Real
import Mathlib.Topology.UnitInterval
import Mathlib.Topology.Order.Basic
import Mathlib.Topology.SubsetProperties
import Mathlib.Data.Set.Prod
import Mathlib.Data.Set.Lattice

set_option autoImplicit false

--CompactIccSpace
open Function
open unitInterval 
open Topology
open Set

--instance : Nontrivial I := ‚ü®0, 1, sorry‚ü©
instance : NoMaxOrder ‚ÜëI := by sorry
instance : NoMinOrder ‚ÜëI := by sorry

theorem existence_of_homotopy_lifting
  (Y X Xt : Type _)
  [instY: TopologicalSpace Y] [instX: TopologicalSpace X] [instXt: TopologicalSpace Xt]
  (p: Xt ‚Üí X)
  -- (Cp: Continuous p)
  (hp: IsCoveringMap p)
  (F: ‚Ñù ‚Üí Y ‚Üí X)
  (CF : Continuous (uncurry F)) -- uncurry F: ‚Ñù √ó Y ‚Üí X  
  (F0t: Y ‚Üí Xt)
  (CF0t: Continuous F0t) 
  (hF0tp : F 0 = p ‚àò F0t) : 
  ‚àÉ Ft : ‚Ñù ‚Üí Y ‚Üí Xt, Continuous (uncurry Ft) ‚àß ‚àÄ t, p ‚àò (Ft t) = F t ‚àß
  Ft 0 = F0t := by
  have q : (‚àÄ y: Y, ‚àÄ t ‚àà I, 
  (‚àÉ U : Set Y, ‚àÉ a, ‚àÉ b, (IsOpen U ‚àß y ‚àà U)  ‚àß  a < t ‚àß t < b)) := by
    --unfold IsCoveringMap at hp
    intro y t t_in
    let x := F t y
    specialize hp x
    have ‚ü®hp1, hp2, hp3‚ü© := hp
    let V : Set X := hp2.baseSet
    have U_is_open := (CF.isOpen_preimage V) hp2.open_baseSet
    rw [isOpen_prod_iff] at U_is_open
    have ty_in_U : ((t,y) ‚àà (uncurry F) ‚Åª¬π' V) := by 
      unfold Set.preimage
      simp
      exact hp3
    specialize U_is_open t y ty_in_U
    have ‚ü®A,B,A_is_open,B_is_open,t_in_A,y_in_B,hU‚ü© := U_is_open
    have ab := IsOpen.mem_nhds A_is_open t_in_A
    rw [mem_nhds_iff_exists_Ioo_subset] at ab
    rcases ab with ‚ü®a,b,t_in_ab,ab_in_A‚ü©
    use B, a, b
    constructor
    exact ‚ü®B_is_open, y_in_B‚ü©
    simp
    unfold Set.Ioo at t_in_ab
    simp at t_in_ab
    exact t_in_ab
  choose! U a b hU ha hb using q
  have q : (‚àÄ y: Y, true) := by
    intro y
    let box : (Y ‚Üí ‚Ñù ‚Üí Set (Y √ó ‚Ñù)) := fun y t => Set.prod (U y t) (Set.Ioo (a y t) (b y t))
    let opencover := ‚ãÉ (t ‚àà I), box y t
    have hcover: Set.prod {y} (Set.Icc (0:‚Ñù) 1) ‚äÜ opencover := by
      rintro ‚ü®k1 ,t‚ü© ‚ü®hk1, ht : t ‚àà _‚ü©
      rw [(mem_singleton_iff.mp hk1 : k1 = y)]; clear hk1 k1
      
      rw [Set.mem_iUnion‚ÇÇ]
      use t, ht
      constructor
      exact (hU y t ht).2
      exact ‚ü®ha y t ht, hb y t ht‚ü©
    have hopen : ‚àÄ t, IsOpen (box y t) := by
      intro t
      simp
      rw [isOpen_prod_iff]
      intro y' t'
      intro h
      unfold Set.prod at h
      simp at h
      use U y t
      use (Ioo (a y t) (b y t))
      constructor
      -- exact (hU y t).1
      -- constructor
      -- exact isOpen_Ioo
      -- constructor
      -- exact h.1
      -- constructor
      -- unfold Ioo
      -- simp
      -- exact ‚ü®h.2.1, h.2.2‚ü©
      -- intro qq hq
      -- unfold Set.prod
      -- simp
      -- constructor
      -- exact hq.1
      -- exact hq.2
      sorry
    have I_is_compact : IsCompact (prod {y} (Icc (0:‚Ñù) 1)) := by
      exact isCompact_singleton.prod isCompact_Icc
    have := box y
    have := IsCompact.elim_finite_subcover I_is_compact (box y) hopen hcover
    

    sorry
  sorry

  theorem test (Y X Xt : Type _)
  [instY: TopologicalSpace Y] [instX: TopologicalSpace X] [instXt: TopologicalSpace Xt]
  (p: Xt ‚Üí X)
  -- (Cp: Continuous p)
  (hp: IsCoveringMap p)
  (F: I ‚Üí Y ‚Üí X)
  (CF : Continuous (uncurry F)) -- uncurry F: ‚Ñù √ó Y ‚Üí X  
  (F0t: Y ‚Üí Xt)
  (CF0t: Continuous F0t) 
  (hF0tp : F 0 = p ‚àò F0t) : 
  ‚àÄ y : Y, ‚àÉ U ‚àà ùìù y, ‚àÉ Ft : I ‚Üí Y ‚Üí Xt, ContinuousOn (uncurry Ft) (univ √óÀ¢ U) 
  ‚àß EqOn (Ft 0) F0t U 
  ‚àß EqOn (uncurry F) (p ‚àò uncurry Ft) (univ √óÀ¢ U) := by sorry 
  
  /-theorem 
  IsCompact.elim_finite_subcover {Œ± : Type u} [topological_space Œ±]{s : set Œ±} {Œπ : Type v} 
   (hs : is_compact s) 
   (U : Œπ ‚Üí set Œ±) 
   (hUo : ‚àÄ (i : Œπ), is_open (U i)) 
   (hsU : s ‚äÜ ‚ãÉ (i : Œπ), U i) :   ------------DONE

   ‚àÉ (t : finset Œπ), s ‚äÜ ‚ãÉ (i : Œπ) (H : i ‚àà t), U i
   -/
