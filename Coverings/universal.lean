import Mathlib.Topology.Homotopy.Path
import Mathlib.Topology.PathConnected
import Mathlib.Topology.Bases
import Mathlib.Topology.Basic
open Set Topology

variable {X : Type _} [TopologicalSpace X] (x‚ÇÄ : X) {x‚ÇÅ : X }

--#synth TopologicalSpace (Path x‚ÇÄ x‚ÇÅ)

open TopologicalSpace
open ContinuousMap

def inc_path {X: Type _} [TopologicalSpace X] 
         (U: Set X) (x y: U) (p : Path x y): Path (x:X) (y:X) where
      toFun t := p t
      continuous_toFun := by continuity  
      source' := by simp
      target' := by simp
#check Subtype

def inc_path_subset {X: Type _} [TopologicalSpace X] 
         {U V: Set X}(x y:X) (h: x ‚àà V) (g: y ‚àà V) (VU: V ‚äÜ U) 
          (p : Path (X := V) ‚ü® x, h ‚ü© ‚ü® y , g ‚ü© ): Path (X := U) ‚ü® x, (VU h) ‚ü© ‚ü® y, (VU g) ‚ü© where
      toFun t := ‚ü® (p t).1, VU (p t).2 ‚ü© 
      continuous_toFun := by continuity  
      source' := by simp
      target' := by simp

def slsc_subspace {X: Type _} [TopologicalSpace X](x:X)(U: Set X) : Prop :=
  ‚àÉ (hx : x ‚àà U), ‚àÄ p : Path (X := U) ‚ü®x, hx‚ü© ‚ü®x, hx‚ü©, Path.Homotopic (inc_path _ _ _ p) (Path.refl _) 

--Subset of a semi-locally-simply-connected subset is semi locally simply connected
lemma subset_slsc_is_slsc {X: Type _} [TopologicalSpace X] (x:X){U V: Set X} (slscU: slsc_subspace x U) (VU: V ‚äÜ U)(xinV: x ‚àà V):
  slsc_subspace x V := by 
    use xinV
    intro loopV 
    rcases slscU with ‚ü® xinU, loopU_hom_const ‚ü© 
    let loopV_to_U := inc_path_subset x x xinV xinV VU loopV
    let loopV_to_X := inc_path _ _ _  loopV
    let loopV_to_U_to_X := inc_path _ _ _  loopV_to_U
    have this1: loopV_to_X = loopV_to_U_to_X := by 
      ext t 
      simp [inc_path, inc_path_subset]
    specialize loopU_hom_const loopV_to_U
    have same_is_hom: Path.Homotopic loopV_to_X loopV_to_U_to_X := by
      rw [this1]
    have loopV_to_X_hom_const :  Path.Homotopic loopV_to_X (Path.refl _) := by
      exact Path.Homotopic.trans same_is_hom loopU_hom_const
    exact loopV_to_X_hom_const 

def slsc_pc_subspace {X: Type _} [TopologicalSpace X] (U: Set X) : Prop :=
  ‚àÉ x, slsc_subspace x U ‚àß IsPathConnected U ‚àß U.Nonempty

class slsc_space (X: Type _)[TopologicalSpace X] where
   slsc_nbhd_exists : ‚àÄ x : X, ‚àÉ U : Set X, IsOpen U ‚àß  slsc_subspace x U 

-- Define the potential basis whose elements are slsc and path connected
def slsc_pc_nbhds (X: Type _)[TopologicalSpace X]: Set (Set X):= 
  { U : Set X | IsOpen U ‚àß slsc_pc_subspace U } 


open Topology Filter

-- A locally path connected space is a locally connected space
instance [TopologicalSpace X] [LocPathConnectedSpace X] : LocallyConnectedSpace X := by
    apply locallyConnectedSpace_of_connected_bases
    exact path_connected_basis
    rintro x U ‚ü®-, hU‚ü©
    exact hU.isConnected.2

--Patrick's lemma that a locally path connected space has a path connected and open basis for the neighborhood filter
lemma path_connected_open_basis [TopologicalSpace X] [LocPathConnectedSpace X] (x : X) :
    (ùìù x).HasBasis (fun s ‚Ü¶ s ‚àà ùìù x ‚àß IsOpen s ‚àß IsPathConnected s) id := by
  constructor
  intro U
  rw [(path_connected_basis x).mem_iff]
  constructor
  ¬∑ rintro ‚ü®V, ‚ü®V_in, -‚ü©, VU : V ‚äÜ U‚ü©
    rcases (nhds_basis_opens x).mem_iff.mp V_in with ‚ü®W, ‚ü®xW, W_op‚ü©, WV‚ü©
    refine ‚ü®connectedComponentIn W x, ‚ü®?_, ?_, ?_‚ü©, ?_‚ü©
    ¬∑ exact W_op.connectedComponentIn.mem_nhds (mem_connectedComponentIn xW)
    ¬∑ exact W_op.connectedComponentIn
    ¬∑ rw [W_op.connectedComponentIn.isConnected_iff_isPathConnected]
      exact isConnected_connectedComponentIn_iff.mpr xW
    ¬∑ exact (connectedComponentIn_subset W x).trans (WV.trans VU)
  ¬∑ rintro ‚ü®V, ‚ü®V_in, -, hV‚ü©, hVU : V ‚äÜ U‚ü©
    exact ‚ü®V, ‚ü®V_in, hV‚ü©, hVU‚ü©

lemma inter_sub_left {X : Type _}(U W : Set X) : U ‚à© W ‚äÜ U := by
  simp

lemma inter_sub_right {X : Type _}(U W : Set X) : U ‚à© W ‚äÜ W := by
  simp

-- To show that the slsc and path connected collection is a basis when X is a locally path connected space
lemma slsc_pc_nbhds_is_basis {X: Type _}[TopologicalSpace X][lpc: LocPathConnectedSpace X][slsc: slsc_space X]:
  IsTopologicalBasis (slsc_pc_nbhds X) :=by 
  apply isTopologicalBasis_of_open_of_nhds

  . intro U Uslpc
    exact Uslpc.1

  . intro a U ainU openU
    rcases slsc_space.slsc_nbhd_exists a with ‚ü® W , ‚ü®openW, ‚ü® ainW , slsc_conditionW ‚ü© ‚ü© ‚ü© 
    have slscW : slsc_subspace a W := by 
      use ainW
      exact slsc_conditionW
    have openUW : IsOpen (U ‚à© W):= TopologicalSpace.isOpen_inter U W openU openW
    have ainUW : a ‚àà U ‚à© W := ‚ü® ainU , ainW ‚ü© 
    have UW_in : (U ‚à© W) ‚àà ùìù a := openUW.mem_nhds ainUW
    have slscUW : slsc_subspace a (U ‚à© W):= by exact subset_slsc_is_slsc a slscW (inter_sub_right U W) ainUW
    rcases (path_connected_open_basis a).mem_iff.mp UW_in with ‚ü® V, ‚ü® V_in, openV , pcV‚ü© , hVUW : V ‚äÜ U ‚à© W‚ü©  
    rcases mem_nhds_iff.mp V_in with ‚ü®S, ‚ü® hSV, openS, ainS ‚ü© ‚ü©
    have slscV : slsc_subspace a V:= by exact subset_slsc_is_slsc a slscUW hVUW (hSV ainS)
    use V
    constructor 
    . exact ‚ü® openV, ‚ü® a, ‚ü® slscV , pcV, ‚ü® a, hSV ainS‚ü© ‚ü© ‚ü©‚ü©  
    . constructor
      . exact hSV ainS
      . exact subset_trans hVUW (inter_sub_left U W) 


/- 
Our neighborhood basis is assumed to consist of non-empty sets, the purpose of get_point 
is to use choice to select a point from each these sets and the follow up lemma is used 
to show we can always do this.
-/

noncomputable
def get_point {X: Type _} (U : Set  X) (h : U.Nonempty) : X := h.choose

lemma slsc_nbhd_is_nonempty (X : Type _) [TopologicalSpace X] {U : Set X} (h : U ‚àà slsc_pc_nbhds X ) : U.Nonempty := by
  simp only [slsc_pc_nbhds] at h
  obtain ‚ü®_, h‚ÇÅ‚ü© := h 
  simp only [slsc_pc_subspace] at h‚ÇÅ
  obtain ‚ü®_ , _, _ , h‚ÇÇ ‚ü© := h‚ÇÅ   
  exact h‚ÇÇ  

/-
  Here we define the underlying "set" for a space we intend to topologize and prove it possesses a covering projection.

  The universal cover is defined to be the quotient of the path space of X modulo the equivalence 
  relation generated by homotopy classes of paths. So long as X satisfies the conditions of being 
  locally path connected and semilocally simply connected, one may show that 
  this construction admits a covering projection onto X and that it is simply connected. 
-/

def UniversalCover (X: Type _) [TopologicalSpace X] (x‚ÇÄ : X) :=
  Œ£ x‚ÇÅ : X , Path.Homotopic.Quotient x‚ÇÄ x‚ÇÅ

/-
Let U be a one of our simply connected open subsets of X.

Select a representative point x·µ§ ‚àà U and let u ‚àà U be some other point. 
A point in the universla cover corresponds to a homotopy class [Œ≥·µ§] of paths connecting x‚ÇÄ to u. 
Since we are assuming each U is path-connected, the homotopy class of Œ≥ depends only on the homotopy 
class of the path used to connect x‚ÇÄ to x·µ§.
-/
def get_point_in_UniversalCover (X: Type _)[TopologicalSpace X] ( x‚ÇÄ : X ) (U : Set X) (h : U ‚àà slsc_pc_nbhds X) 
  ( Œ≥ : Path x‚ÇÄ (get_point U (slsc_nbhd_is_nonempty X h))) (u : U) : UniversalCover X x‚ÇÄ :=
  Quotient.comp ‚ü¶Œ≥‚üß ‚ü¶Path (get_point U (slsc_nbhd_is_nonempty X h)) u ‚üß
  sorry

def all_local_compositions (X: Type _)[TopologicalSpace X] ( x‚ÇÄ : X ) (U : Set X) (h : U ‚àà slsc_pc_nbhds X) 
  ( Œ≥ : Path x‚ÇÄ (get_point U (slsc_nbhd_is_nonempty X h ))): Set ( UniversalCover X x‚ÇÄ ) := 
  get_point_in_UniversalCover X x‚ÇÄ U h Œ≥ '' Set.univ 

/-
lifts_of_slsc_pc_nbhds creates a collection of subsets of the universal cover as follows.

For each element U in the basis of simply connected sets, select a representative point x·µ§
and for each homotopy class [Œ≥] of paths connecting x‚ÇÄ to x·µ§, we create the set 

    U_Œ≥  := {[Œ≥·µ§] | Œ∑ : I ‚Üí U such that [Œ≥·µ§] = [Œ∑ ‚àò Œ≥] }.

Since each U is path connected and simply connected by assumption, the homotopy class of Œ∑ is 
determined by its endpoints and standard results on homotopy classes of concatenations of path
tell us the homotopy class of Œ≥·µ§ is determined by the homotopy class of Œ≥. 

The construction allows one to construct a bijection between points in U_Œ≥ and points in U and
a bit more work allows us to say this bijection is a homeomorphism. 

-/        
def lifts_of_slsc_pc_nbhds (X : Type _) [TopologicalSpace X ] (x‚ÇÄ : X) 
 : Set (Set (UniversalCover X x‚ÇÄ)) :=

  range fun p : ( Œ£ U : slsc_pc_nbhds X , Path x‚ÇÄ (get_point U.1 (slsc_nbhd_is_nonempty X U.2 )) ) 
    ‚Ü¶  all_local_compositions X x‚ÇÄ p.1.1 p.1.2 p.2  --all_local_compositions X x‚ÇÄ p.1 _ --p.2

/-
Now we give UniversalCover the topology one generated by lifts_of_slsc_pc_nbhds
-/
instance (X : Type _) [TopologicalSpace X] [LocPathConnectedSpace X] [slsc_space X] (x‚ÇÄ : X) : TopologicalSpace (UniversalCover X x‚ÇÄ) :=  
  generateFrom (lifts_of_slsc_pc_nbhds X x‚ÇÄ)

--Need to prove the U_Œ≥ are actually U_[Œ≥] aka independence of homotopy class of Œ≥

--Lemma to prove propert (*) in hatcher
lemma property_star {X: Type _} [TopologicalSpace X] [lpc: LocPathConnectedSpace X] 
  [slsc: slsc_space X] {x‚ÇÄ : X} (Y : UniversalCover X x‚ÇÄ) (y: Y) (U : Set X) (h : U ‚àà slsc_pc_nbhds X) 
  ( Œ≥ : Path x‚ÇÄ (get_point U (slsc_nbhd_is_nonempty X h ))) (U_gamma : all_local_compositions X x‚ÇÄ U h Œ≥)
  : y ‚àà U_gamma ‚Üí all_local_compositions X x‚ÇÄ U h y:= by sorry

lemma lifts_of_slsc_pc_nbhds_is_basis {X: Type _} [TopologicalSpace X] [lpc: LocPathConnectedSpace X] 
  [slsc: slsc_space X] (x‚ÇÄ : X) (Y : UniversalCover X x‚ÇÄ) :
  IsTopologicalBasis (lifts_of_slsc_pc_nbhds X x‚ÇÄ) := by sorry 
  -- Here we will prove that the lifts of the basis sets form a basis for the topology they generate on the UniversalCover 

