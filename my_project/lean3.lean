import Mathlib.Topology.Covering
import Mathlib.Topology.IsLocallyHomeomorph
import Mathlib.Topology.FiberBundle.Basic

variable {Œ± : Type}{E X : Type Œ±} [TopologicalSpace E] [TopologicalSpace X] (f : E ‚Üí X) (s : Set X)

/-- A point `x : X` is evenly covered by `f : E ‚Üí X` if `x` has an evenly covered neighborhood. -/

--`def IsEvenlyCovered (x : X) (I : Type _) [TopologicalSpace I] `:=
--  `DiscreteTopology I ‚àß ‚àÉ t : Trivialization I f, x ‚àà t.baseSet`

theorem mk (F : X ‚Üí Type Œ±) [‚àÄ x, TopologicalSpace (F x)] [hF : ‚àÄ x, DiscreteTopology (F x)]
    (e : ‚àÄ x ‚àà s, Trivialization (F x) f) (h : ‚àÄ (x : X) (hx : x ‚àà s), x ‚àà (e x hx).baseSet) :
    IsCoveringMapOn f s := fun x hx =>
  IsEvenlyCovered.to_isEvenlyCovered_preimage ‚ü®hF x, e x hx, h x hx‚ü©

--If f is a covering map, from covering space E to topological space X, then f is continuous
lemma continuous (hf : IsCoveringMap f) : Continuous f := by sorry

--If f is a covering map, then f is a local homeomorphism 
lemma is_locally_homeomorph (hf : IsCoveringMap f) : IsLocallyHomeomorph f := by sorry

--If f is a covering map, then it is an open map
lemma is_open_map (hf : IsCoveringMap f) : IsOpenMap f := by sorry

--If f is a covering map and a surjective function then it is a quotient map
lemma quotient_map (hf : IsCoveringMap f) (hf' : Function.Surjective f) : QuotientMap f := by sorry

-- `noncomputable def to_homeomorph (hf : IsCoveringMap f)`
--   `(h : Function.Bijective f) : Homeomorph E X :=`
--` Homeomorph.homeomorphOfContinuousOpen (equiv.of_bijective) hf.continuous hf.is_open_map`

-- `lemma is_locally_constant_card (hf : is_covering_map f) :`
--  ` is_locally_constant (Œª x, #(f ‚Åª¬π' {x})) := `
-- `(is_locally_constant.iff_exists_open _).2 $ Œª x, let ‚ü®t, ht‚ü© := (hf x).2 in`
--  ` ‚ü®_, t.open_base_set, ht, Œª y hy, (t.preimage_singleton_homeomorph hy).to_equiv.cardinal_eq‚ü©`

lemma is_fiber_bundle.is_covering_map {F : Type Œ±} [TopologicalSpace F] : IsCoveringMap f := by sorry

lemma clopen_set_intersect_connected_components_whole_set (Y: Type Œ±) [TopologicalSpace Y]
  (S : Set Y) (hS : IsClopen S) (w : ‚àÄ x : Y, ‚àÉ y ‚àà connectedComponent x, y ‚àà S) :
  S = Set.univ := by sorry

lemma is_open_inter_of_coe_preim {X : Type Œ±} [TopologicalSpace X] (s t : Set X) (hs : IsOpen s)
  --(h : IsOpen((coe : s ‚Üí X) ‚Åª¬π' t)) : IsOpen (t ‚à© s) := by sorry

lemma is_open_of_is_open_coe (Y:Type Œ±) [TopologicalSpace Y] (A: Set Y)
--(hA : ‚àÄ x : Y, ‚àÉ (U : Set Y) (hU : U ‚àà ùìù x), IsOpen ((coe : U ‚Üí Y) ‚Åª¬π' A)) : IsOpen A := by sorry

lemma is_closed_of_is_closed_coe (Y:Type Œ±) [TopologicalSpace Y] (A: Set Y)
--(hA : ‚àÄ x : Y, ‚àÉ (U : Set Y) (hU : U ‚àà ùìù x), IsClosed ((coe : U ‚Üí Y) ‚Åª¬π' A)) : IsClosed A := by sorry

lemma is_clopen_of_is_clopen_coe (Y:Type Œ±) [TopologicalSpace Y] (A: Set Y)
--(hA : ‚àÄ x : Y, ‚àÉ (U : Set Y) (hU : U ‚àà ùìù x), is_clopen ((coe : U ‚Üí Y) ‚Åª¬π' A)) : IsClopen A : =by sorry 

theorem clopen_equalizer_of_discrete {X Y : Type Œ±} [TopologicalSpace X] [TopologicalSpace Y]
  [DiscreteTopology Y] {f g : X ‚Üí Y} (hf : Continuous f) (hg : Continuous g) :
  --IsClopen {x : X | f x = g x} := (is_clopen_discrete (set.diagonal Y)).preimage (hf.prod_mk hg)


lemma tautology : true := rfl

theorem uniqueness_of_homotopy_lifting (Y : Type Œ±) [TopologicalSpace Y] (hf : IsCoveringMap f)
  (H‚ÇÅ H‚ÇÇ : ContinuousMap Y E) (h : f ‚àò H‚ÇÅ = f ‚àò H‚ÇÇ)
  (hC : ‚àÄ x : Y, ‚àÉ y ‚àà connectedComponent x, H‚ÇÅ y = H‚ÇÇ y) :
  H‚ÇÅ = H‚ÇÇ := by sorry

-- begin
--   refine fun_like.ext H‚ÇÅ H‚ÇÇ (set.eq_univ_iff_forall.mp
--     (clopen_set_intersect_connected_components_whole_set _ _
--     (is_clopen_of_is_clopen_coe _ _ (Œª x, _)) hC)),
--   let t := (hf (f (H‚ÇÅ x))).to_trivialization,
--   let U := (f ‚àò H‚ÇÅ) ‚Åª¬π' t.base_set,
--   refine ‚ü®U, (t.open_base_set.preimage (hf.continuous.comp H‚ÇÅ.continuous)).mem_nhds
--     ((hf (f (H‚ÇÅ x)))).mem_to_trivialization_base_set, _‚ü©,
--   change is_clopen {y : U | H‚ÇÅ y = H‚ÇÇ y},
--   have h0 : ‚àÄ y : U, f (H‚ÇÅ y) = f (H‚ÇÇ y) := Œª y, congr_fun h y,
--   have h1 : ‚àÄ y : U, f (H‚ÇÅ y) ‚àà t.base_set := subtype.prop,
--   have h2 : ‚àÄ y : U, f (H‚ÇÇ y) ‚àà t.base_set := Œª y, h0 y ‚ñ∏ h1 y,
--   have key : ‚àÄ y : U, H‚ÇÅ y = H‚ÇÇ y ‚Üî (t (H‚ÇÅ y)).2 = (t (H‚ÇÇ y)).2,
--   { refine Œª y, ‚ü®congr_arg (prod.snd ‚àò t), Œª m, _‚ü©,
--     have h0 : f (H‚ÇÅ y) = f (H‚ÇÇ y) := congr_fun h y,
--     rw [‚Üêt.coe_fst' (h1 y), ‚Üêt.coe_fst' (h2 y)] at h0,
--     refine t.inj_on (t.mem_source.mpr (h1 y)) (t.mem_source.mpr (h2 y)) (prod.ext h0 m) },
--   simp_rw [key],
--   haveI := (hf (f (H‚ÇÅ x))).1,
--   simp only [‚Üêt.mem_source] at h1 h2,
--   refine clopen_equalizer_of_discrete
--     (continuous_snd.comp (t.continuous_to_fun.comp_continuous (H‚ÇÅ.2.comp continuous_subtype_coe) h1))